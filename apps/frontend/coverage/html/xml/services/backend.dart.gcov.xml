<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<?xml-stylesheet type="text/xsl" href="../jgenhtml.xsl"?><coverage branch-rate="NaN" branches-covered="0" branches-valid="0" complexity="0" date="2023-12-21" filename="backend.dart" function-rate="NaN" functions-covered="0" functions-valid="0" line-rate="0.43421054" lines-covered="33" lines-valid="76" package="services" testname="lcov.info" version="1.6">
    <lines>
        <line number="1">
            <code>import 'dart:async';</code>
        </line>
        <line number="2">
            <code>import 'dart:convert';</code>
        </line>
        <line number="3">
            <code/>
        </line>
        <line number="4">
            <code>import 'package:http/http.dart' as http;</code>
        </line>
        <line number="5">
            <code>import 'package:organisation_app/model/module.dart';</code>
        </line>
        <line number="6">
            <code>import 'package:organisation_app/model/task.dart';</code>
        </line>
        <line number="7">
            <code>import 'package:organisation_app/settings/environment.dart';</code>
        </line>
        <line number="8">
            <code/>
        </line>
        <line number="9">
            <code>class Backend {</code>
        </line>
        <line hits="3" number="10">
            <code>  static final Backend _singleton = Backend._internal();</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line number="11">
            <code/>
        </line>
        <line hits="1" number="12">
            <code>  factory Backend() {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1" number="13">
            <code>    return _singleton;</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="14">
            <code>  }</code>
        </line>
        <line number="15">
            <code/>
        </line>
        <line hits="1" number="16">
            <code>  Backend._internal() {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="17">
            <code>    // init things inside this</code>
        </line>
        <line number="18">
            <code>  }</code>
        </line>
        <line number="19">
            <code/>
        </line>
        <line number="20">
            <code>  // Access the backend API</code>
        </line>
        <line hits="4" number="21">
            <code>  static final _backend = "${Environment.apiUrl}/";</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line number="22">
            <code/>
        </line>
        <line number="23">
            <code>  // get item list from backend</code>
        </line>
        <line hits="0" number="24">
            <code>  Future&lt;List&lt;Task&gt;&gt; fetchItemList(http.Client client) async {</code>
        </line>
        <line number="25">
            <code>    // access REST interface with get request</code>
        </line>
        <line hits="0" number="26">
            <code>    final response = await client.get(Uri.parse('${_backend}tasks'));</code>
        </line>
        <line number="27">
            <code/>
        </line>
        <line number="28">
            <code>    // check response from backend</code>
        </line>
        <line hits="0" number="29">
            <code>    if (response.statusCode == 200) {</code>
        </line>
        <line hits="0" number="30">
            <code>      return List&lt;Task&gt;.from(json</code>
        </line>
        <line hits="0" number="31">
            <code>          .decode(utf8.decode(response.bodyBytes))</code>
        </line>
        <line hits="0" number="32">
            <code>          .map((x) =&gt; Task.fromJson(x)));</code>
        </line>
        <line number="33">
            <code>    } else {</code>
        </line>
        <line hits="0" number="34">
            <code>      throw Exception('Failed to load Itemlist');</code>
        </line>
        <line number="35">
            <code>    }</code>
        </line>
        <line number="36">
            <code>  }</code>
        </line>
        <line number="37">
            <code/>
        </line>
        <line number="38">
            <code>  // save new item on backend</code>
        </line>
        <line hits="0" number="39">
            <code>  Future&lt;Task&gt; createTask(http.Client client, String name, String deadline,</code>
        </line>
        <line number="40">
            <code>      int priority, bool done, String frequency) async {</code>
        </line>
        <line hits="0" number="41">
            <code>    Map data = {</code>
        </line>
        <line number="42">
            <code>      'task_name': name,</code>
        </line>
        <line number="43">
            <code>      'priority': priority,</code>
        </line>
        <line number="44">
            <code>      'is_done': done,</code>
        </line>
        <line number="45">
            <code>      'frequency': frequency,</code>
        </line>
        <line number="46">
            <code>      'deadline': deadline,</code>
        </line>
        <line number="47">
            <code>    };</code>
        </line>
        <line number="48">
            <code/>
        </line>
        <line number="49">
            <code>    // access REST interface with post request</code>
        </line>
        <line hits="0" number="50">
            <code>    var response = await client.post(Uri.parse('${_backend}tasks/task'),</code>
        </line>
        <line hits="0" number="51">
            <code>        headers: &lt;String, String&gt;{'Content-Type': 'application/json'},</code>
        </line>
        <line hits="0" number="52">
            <code>        body: json.encode(data));</code>
        </line>
        <line number="53">
            <code/>
        </line>
        <line number="54">
            <code>    // check response from backend</code>
        </line>
        <line hits="0" number="55">
            <code>    if (response.statusCode == 200) {</code>
        </line>
        <line hits="0" number="56">
            <code>      return Task.fromJson(json.decode(utf8.decode(response.bodyBytes)));</code>
        </line>
        <line number="57">
            <code>    } else {</code>
        </line>
        <line hits="0" number="58">
            <code>      throw Exception('Failed to create item');</code>
        </line>
        <line number="59">
            <code>    }</code>
        </line>
        <line number="60">
            <code>  }</code>
        </line>
        <line number="61">
            <code/>
        </line>
        <line number="62">
            <code>  // Update item on backend</code>
        </line>
        <line hits="0" number="63">
            <code>  Future&lt;void&gt; updateTask(http.Client client, int id, String name,</code>
        </line>
        <line number="64">
            <code>      String deadline, int priority) async {</code>
        </line>
        <line hits="0" number="65">
            <code>    Map data = {</code>
        </line>
        <line number="66">
            <code>      'id': id,</code>
        </line>
        <line number="67">
            <code>      'name': name,</code>
        </line>
        <line number="68">
            <code>      'deadline': deadline,</code>
        </line>
        <line number="69">
            <code>      'priority': priority,</code>
        </line>
        <line number="70">
            <code>    };</code>
        </line>
        <line number="71">
            <code/>
        </line>
        <line number="72">
            <code>    // access REST interface with put request</code>
        </line>
        <line hits="0" number="73">
            <code>    var response = await client.put(Uri.parse('${_backend}item'),</code>
        </line>
        <line hits="0" number="74">
            <code>        headers: &lt;String, String&gt;{'Content-Type': 'application/json'},</code>
        </line>
        <line hits="0" number="75">
            <code>        body: json.encode(data));</code>
        </line>
        <line number="76">
            <code/>
        </line>
        <line number="77">
            <code>// check response from backend</code>
        </line>
        <line hits="0" number="78">
            <code>    if (response.statusCode != 200) {</code>
        </line>
        <line hits="0" number="79">
            <code>      throw Exception('Failed to update item');</code>
        </line>
        <line number="80">
            <code>    }</code>
        </line>
        <line number="81">
            <code>  }</code>
        </line>
        <line number="82">
            <code/>
        </line>
        <line number="83">
            <code>  // delete item on backend</code>
        </line>
        <line hits="0" number="84">
            <code>  Future&lt;void&gt; deleteTask(http.Client client, int id) async {</code>
        </line>
        <line hits="0" number="85">
            <code>    Map data = {</code>
        </line>
        <line number="86">
            <code>      'id': id,</code>
        </line>
        <line number="87">
            <code>    };</code>
        </line>
        <line number="88">
            <code/>
        </line>
        <line number="89">
            <code>    // access REST interface with delete request</code>
        </line>
        <line hits="0" number="90">
            <code>    var response = await client.delete(</code>
        </line>
        <line hits="0" number="91">
            <code>        Uri.parse('${_backend}tasks/task/{{id}}'),</code>
        </line>
        <line hits="0" number="92">
            <code>        headers: &lt;String, String&gt;{'Content-Type': 'application/json'},</code>
        </line>
        <line hits="0" number="93">
            <code>        body: json.encode(data));</code>
        </line>
        <line number="94">
            <code/>
        </line>
        <line number="95">
            <code>    // check response from backend</code>
        </line>
        <line hits="0" number="96">
            <code>    if (response.statusCode != 200) {</code>
        </line>
        <line hits="0" number="97">
            <code>      throw Exception('Failed to delete item');</code>
        </line>
        <line number="98">
            <code>    }</code>
        </line>
        <line number="99">
            <code>  }</code>
        </line>
        <line number="100">
            <code/>
        </line>
        <line number="101">
            <code>  // Get modules</code>
        </line>
        <line hits="1" number="102">
            <code>  Future&lt;List&lt;Module&gt;&gt; fetchModuleList(http.Client client) async {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="103">
            <code>    // Access REST interface with get request</code>
        </line>
        <line hits="4" number="104">
            <code>    final response = await client.get(Uri.parse('${_backend}modules'));</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line number="105">
            <code/>
        </line>
        <line number="106">
            <code>    // Check response from backend</code>
        </line>
        <line hits="2" number="107">
            <code>    if (response.statusCode == 200) {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3" number="108">
            <code>      var jsonData = json.decode(utf8.decode(response.bodyBytes));</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line number="109">
            <code>      // Extract the list from the 'content' field</code>
        </line>
        <line hits="1" number="110">
            <code>      var content = jsonData['content'];</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="111">
            <code>      if (content != null) {</code>
        </line>
        <line hits="4" number="112">
            <code>        var modules = List&lt;Module&gt;.from(content.map((x) =&gt; Module.fromJson(x)));</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line number="113">
            <code>        return modules;</code>
        </line>
        <line number="114">
            <code>      } else {</code>
        </line>
        <line hits="1" number="115">
            <code>        throw Exception('Content field is missing in the JSON data');</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="116">
            <code>      }</code>
        </line>
        <line number="117">
            <code>    } else {</code>
        </line>
        <line hits="1" number="118">
            <code>      throw Exception('Failed to load Module list');</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="119">
            <code>    }</code>
        </line>
        <line number="120">
            <code>  }</code>
        </line>
        <line number="121">
            <code/>
        </line>
        <line number="122">
            <code>  // Get modules with pagination and sorting</code>
        </line>
        <line hits="1" number="123">
            <code>  Future&lt;List&lt;Module&gt;&gt; fetchModuleListWithPaginationAndSorting(</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="124">
            <code>    http.Client client, {</code>
        </line>
        <line number="125">
            <code>    int page = 0,</code>
        </line>
        <line number="126">
            <code>    int size = 10,</code>
        </line>
        <line number="127">
            <code>    String sortBy = 'name',</code>
        </line>
        <line number="128">
            <code>    String sortDir = 'asc',</code>
        </line>
        <line number="129">
            <code>    String searchQuery = '',</code>
        </line>
        <line number="130">
            <code>  }) async {</code>
        </line>
        <line number="131">
            <code>    try {</code>
        </line>
        <line hits="1" number="132">
            <code>      final queryParams = {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1" number="133">
            <code>        'page': page.toString(),</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1" number="134">
            <code>        'size': size.toString(),</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="135">
            <code>        'sortBy': sortBy,</code>
        </line>
        <line number="136">
            <code>        'sortDir': sortDir,</code>
        </line>
        <line number="137">
            <code>      };</code>
        </line>
        <line number="138">
            <code/>
        </line>
        <line hits="1" number="139">
            <code>      if (searchQuery.isNotEmpty) {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1" number="140">
            <code>        queryParams['search'] =</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="141">
            <code>            searchQuery; // Add the search query if not empty</code>
        </line>
        <line number="142">
            <code>      }</code>
        </line>
        <line number="143">
            <code>      // Construct the URL with query parameters for pagination and sorting</code>
        </line>
        <line number="144">
            <code>      final url =</code>
        </line>
        <line hits="4" number="145">
            <code>          Uri.parse('${_backend}modules').replace(queryParameters: queryParams);</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line number="146">
            <code/>
        </line>
        <line number="147">
            <code>      // Make the GET request</code>
        </line>
        <line hits="1" number="148">
            <code>      final response = await client.get(url);</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="149">
            <code/>
        </line>
        <line number="150">
            <code>      // Check the response status</code>
        </line>
        <line hits="2" number="151">
            <code>      if (response.statusCode == 200) {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="3" number="152">
            <code>        var jsonData = json.decode(utf8.decode(response.bodyBytes));</code>
            <hit count="3" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="1" number="153">
            <code>        var content = jsonData['content'];</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="154">
            <code>        if (content != null) {</code>
        </line>
        <line hits="4" number="155">
            <code>          return List&lt;Module&gt;.from(content.map((x) =&gt; Module.fromJson(x)));</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line number="156">
            <code>        } else {</code>
        </line>
        <line hits="1" number="157">
            <code>          throw Exception('Content field is missing in the JSON data');</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="158">
            <code>        }</code>
        </line>
        <line number="159">
            <code>      } else {</code>
        </line>
        <line hits="1" number="160">
            <code>        throw Exception('Failed to load Module list');</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="161">
            <code>      }</code>
        </line>
        <line number="162">
            <code>    } catch (e) {</code>
        </line>
        <line hits="2" number="163">
            <code>      throw Exception('Error fetching modules with pagination and sorting: $e');</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line number="164">
            <code>    }</code>
        </line>
        <line number="165">
            <code>  }</code>
        </line>
        <line number="166">
            <code/>
        </line>
        <line number="167">
            <code>  // Get module</code>
        </line>
        <line hits="1" number="168">
            <code>  Future&lt;Module&gt; fetchModule(http.Client client, int id) async {</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="169">
            <code>    // access REST interface with get request</code>
        </line>
        <line hits="4" number="170">
            <code>    final response = await client.get(Uri.parse('${_backend}modules/$id'));</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line number="171">
            <code/>
        </line>
        <line number="172">
            <code>    // check response from backend</code>
        </line>
        <line hits="2" number="173">
            <code>    if (response.statusCode == 200) {</code>
            <hit count="2" name="&lt;unnamed&gt;"/>
        </line>
        <line hits="4" number="174">
            <code>      return Module.fromJson(json.decode(utf8.decode(response.bodyBytes)));</code>
            <hit count="4" name="&lt;unnamed&gt;"/>
        </line>
        <line number="175">
            <code>    } else {</code>
        </line>
        <line hits="1" number="176">
            <code>      throw Exception('Failed to fetch Module');</code>
            <hit count="1" name="&lt;unnamed&gt;"/>
        </line>
        <line number="177">
            <code>    }</code>
        </line>
        <line number="178">
            <code>  }</code>
        </line>
        <line number="179">
            <code/>
        </line>
        <line number="180">
            <code>  // set done value of item on backend</code>
        </line>
        <line hits="0" number="181">
            <code>  Future&lt;void&gt; updateItemDoneStatus(</code>
        </line>
        <line number="182">
            <code>      http.Client client, int id, bool? done) async {</code>
        </line>
        <line hits="0" number="183">
            <code>    Map data = {</code>
        </line>
        <line number="184">
            <code>      'id': id,</code>
        </line>
        <line number="185">
            <code>      'done': done,</code>
        </line>
        <line number="186">
            <code>    };</code>
        </line>
        <line number="187">
            <code/>
        </line>
        <line number="188">
            <code>    // access REST interface with put request</code>
        </line>
        <line hits="0" number="189">
            <code>    var response = await client.put(Uri.parse('${_backend}item/done'),</code>
        </line>
        <line hits="0" number="190">
            <code>        headers: &lt;String, String&gt;{'Content-Type': 'application/json'},</code>
        </line>
        <line hits="0" number="191">
            <code>        body: json.encode(data));</code>
        </line>
        <line number="192">
            <code/>
        </line>
        <line number="193">
            <code>    // check response from backend</code>
        </line>
        <line hits="0" number="194">
            <code>    if (response.statusCode != 200) {</code>
        </line>
        <line hits="0" number="195">
            <code>      throw Exception('Failed to update item');</code>
        </line>
        <line number="196">
            <code>    }</code>
        </line>
        <line number="197">
            <code>  }</code>
        </line>
        <line number="198">
            <code/>
        </line>
        <line number="199">
            <code>  // create a Get request for the backend</code>
        </line>
        <line hits="0" number="200">
            <code>  Future&lt;List&lt;String&gt;&gt; getRequest(http.Client client, String url) async {</code>
        </line>
        <line number="201">
            <code>    // access REST interface with get request</code>
        </line>
        <line hits="0" number="202">
            <code>    final response = await client.get(Uri.parse('$_backend$url'));</code>
        </line>
        <line number="203">
            <code/>
        </line>
        <line number="204">
            <code>    // check response from backend</code>
        </line>
        <line hits="0" number="205">
            <code>    if (response.statusCode == 200) {</code>
        </line>
        <line hits="0" number="206">
            <code>      return List&lt;String&gt;.from(</code>
        </line>
        <line hits="0" number="207">
            <code>          json.decode(utf8.decode(response.bodyBytes)).map((x) =&gt; x));</code>
        </line>
        <line number="208">
            <code>    } else {</code>
        </line>
        <line hits="0" number="209">
            <code>      throw Exception('Failed to load $url');</code>
        </line>
        <line number="210">
            <code>    }</code>
        </line>
        <line number="211">
            <code>  }</code>
        </line>
        <line number="212">
            <code>}</code>
        </line>
    </lines>
    <config branch-coverage="true" description-file="false" function-coverage="true" genhtml_hi_limit="90" genhtml_med_limit="75" legend="false" no-sort="false" no-source="false" show-details="false"/>
    <base href="../"/>
    <base href="../"/>
</coverage>
